 gcc -g p8original.c
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
 gcc -g p11final.c
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) info break
No breakpoints or watchpoints.
(gdb) break main
Breakpoint 1 at 0xa3f: file p11final.c, line 72.
(gdb) info break
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000000a3f in main at p11final.c:72
(gdb) run
Starting program: /home/runner/pps-test1-pushya1/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p11final.c:72
72  {   
(gdb) n
73      int n=_n();
(gdb) s
_n () at p11final.c:11
11  {
(gdb) n
13      printf("No.of complex numbers to add:\t");
(gdb) n
14      scanf("%d",&n);
(gdb) n
No.of complex numbers to add:   2
15      return n;
(gdb) n
16  }
(gdb) n
main () at p11final.c:74
74      Complex c[n],res;
(gdb) n
75      input_n_complex(n,c);
(gdb) s
input_n_complex (n=2, c=0x7ffc2ba29620) at p11final.c:30
30      for (int i =0;i<n;i++)
(gdb) n
32          c[i]=input_complex();
(gdb) n
Enter the real part:5
Enter the imaginary part:2
30      for (int i =0;i<n;i++)
(gdb) n
32          c[i]=input_complex();
(gdb) n
Enter the real part:5
Enter the imaginary part:2
30      for (int i =0;i<n;i++)
(gdb) n
35  }
(gdb) n
main () at p11final.c:76
76      res= add_n_complex(n,c);
(gdb) s
add_n_complex (n=2, c=0x7ffc2ba29620) at p11final.c:47
47      res.real= 0;
(gdb) n
48      res.imaginary=0;
(gdb) n
49      for (int i=0;i<n;i++)
(gdb) n
51          res=add(res,c[i]);
(gdb) n
49      for (int i=0;i<n;i++)
(gdb) n
51          res=add(res,c[i]);
(gdb) n
49      for (int i=0;i<n;i++)
(gdb) n
53      return res;
(gdb) n
54  }
(gdb) n
main () at p11final.c:77
77      output(n,c,res);
(gdb) s
output (n=2, c=0x7ffc2ba29620, result=...) at p11final.c:57
57      if(n==1)
(gdb) n
63        for(int i=0; i<n-1; i++)
(gdb) n
65          printf("%0.2f + %0.2fi\n", c[i].real, c[i].imaginary);
(gdb) n
5.00 + 2.00i
63        for(int i=0; i<n-1; i++)
(gdb) n
67        printf("+ %0.2f + %0.2fi is\n%0.2f + %0.2fi\n", c[n-1].real, c[n-1].imaginary, result.real, result.imaginary);
(gdb) n
+ 5.00 + 2.00i is
10.00 + 4.00i
69  }
(gdb) n
main () at p11final.c:78
78      return 0;
(gdb) c
Continuing.
[Inferior 1 (process 293) exited normally]
(gdb) quit